{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.20.4.51522",
      "templateHash": "13131533899599657161"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the the environment which is used to generate a short unique hash used in all resources."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group name where the resources will be deployed"
      }
    },
    "deployVnet": {
      "type": "bool",
      "metadata": {
        "description": "Deploy the virtual network. If it's already created, this should be false"
      }
    },
    "devboxRbac": {
      "type": "object",
      "metadata": {
        "description": "The RBAC for the devbox"
      }
    },
    "catalog": {
      "type": "object",
      "metadata": {
        "description": "The artifcats catalog to add"
      }
    },
    "vNetName": {
      "type": "string",
      "defaultValue": ""
    },
    "keyVaultPatSecretUri": {
      "type": "string",
      "defaultValue": ""
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": ""
    },
    "keyVaultPatSecretValue": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The secret value for the PAT. If the keyVaultPatSecretUri is provided, this is not needed"
      }
    },
    "devBoxName": {
      "type": "string",
      "defaultValue": ""
    },
    "projectName": {
      "type": "string",
      "defaultValue": ""
    },
    "poolNames": {
      "type": "array",
      "defaultValue": [
        {
          "name": "DevPool",
          "enableLocalAdmin": true,
          "schedule": {},
          "definition": "DeveloperBox"
        },
        {
          "name": "QAPool",
          "enableLocalAdmin": false,
          "schedule": {
            "time": "19:00",
            "timeZone": "America/Toronto"
          },
          "definition": "QABox"
        }
      ]
    },
    "definitions": {
      "type": "array",
      "defaultValue": [
        {
          "name": "DeveloperBox",
          "sku": "",
          "storage": ""
        },
        {
          "name": "QABox",
          "sku": "",
          "storage": ""
        }
      ]
    }
  },
  "variables": {
    "$fxv#0": {
      "analysisServicesServers": "as",
      "apiManagementService": "apim-",
      "appConfigurationConfigurationStores": "appcs-",
      "appManagedEnvironments": "cae-",
      "appContainerApps": "ca-",
      "authorizationPolicyDefinitions": "policy-",
      "automationAutomationAccounts": "aa-",
      "blueprintBlueprints": "bp-",
      "blueprintBlueprintsArtifacts": "bpa-",
      "cacheRedis": "redis-",
      "cdnProfiles": "cdnp-",
      "cdnProfilesEndpoints": "cdne-",
      "cognitiveServicesAccounts": "cog-",
      "cognitiveServicesFormRecognizer": "cog-fr-",
      "cognitiveServicesTextAnalytics": "cog-ta-",
      "computeAvailabilitySets": "avail-",
      "computeCloudServices": "cld-",
      "computeDiskEncryptionSets": "des",
      "computeDisks": "disk",
      "computeDisksOs": "osdisk",
      "computeGalleries": "gal",
      "computeSnapshots": "snap-",
      "computeVirtualMachines": "vm",
      "computeVirtualMachineScaleSets": "vmss-",
      "containerInstanceContainerGroups": "ci",
      "containerRegistryRegistries": "cr",
      "containerServiceManagedClusters": "aks-",
      "databricksWorkspaces": "dbw-",
      "dataFactoryFactories": "adf-",
      "dataLakeAnalyticsAccounts": "dla",
      "dataLakeStoreAccounts": "dls",
      "dataMigrationServices": "dms-",
      "dBforMySQLServers": "mysql-",
      "dBforPostgreSQLServers": "psql-",
      "devbox": "dvb-",
      "devicesIotHubs": "iot-",
      "devicesProvisioningServices": "provs-",
      "devicesProvisioningServicesCertificates": "pcert-",
      "documentDBDatabaseAccounts": "cosmos-",
      "eventGridDomains": "evgd-",
      "eventGridDomainsTopics": "evgt-",
      "eventGridEventSubscriptions": "evgs-",
      "eventHubNamespaces": "evhns-",
      "eventHubNamespacesEventHubs": "evh-",
      "gallery": "gal-",
      "hdInsightClustersHadoop": "hadoop-",
      "hdInsightClustersHbase": "hbase-",
      "hdInsightClustersKafka": "kafka-",
      "hdInsightClustersMl": "mls-",
      "hdInsightClustersSpark": "spark-",
      "hdInsightClustersStorm": "storm-",
      "hybridComputeMachines": "arcs-",
      "imageTemplate": "it-",
      "insightsActionGroups": "ag-",
      "insightsComponents": "appi-",
      "keyVaultVaults": "kv-",
      "kubernetesConnectedClusters": "arck",
      "kustoClusters": "dec",
      "kustoClustersDatabases": "dedb",
      "loadtest": "lt-",
      "logicIntegrationAccounts": "ia-",
      "logicWorkflows": "logic-",
      "machineLearningServicesWorkspaces": "mlw-",
      "managedIdentityUserAssignedIdentities": "id-",
      "managementManagementGroups": "mg-",
      "migrateAssessmentProjects": "migr-",
      "networkApplicationGateways": "agw-",
      "networkApplicationSecurityGroups": "asg-",
      "networkAzureFirewalls": "afw-",
      "networkBastionHosts": "bas-",
      "networkConnections": "con-",
      "networkDnsZones": "dnsz-",
      "networkExpressRouteCircuits": "erc-",
      "networkFirewallPolicies": "afwp-",
      "networkFirewallPoliciesWebApplication": "waf",
      "networkFirewallPoliciesRuleGroups": "wafrg",
      "networkFrontDoors": "fd-",
      "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
      "networkLoadBalancersExternal": "lbe-",
      "networkLoadBalancersInternal": "lbi-",
      "networkLoadBalancersInboundNatRules": "rule-",
      "networkLocalNetworkGateways": "lgw-",
      "networkNatGateways": "ng-",
      "networkNetworkInterfaces": "nic-",
      "networkNetworkSecurityGroups": "nsg-",
      "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
      "networkNetworkWatchers": "nw-",
      "networkPrivateDnsZones": "pdnsz-",
      "networkPrivateLinkServices": "pl-",
      "networkPublicIPAddresses": "pip-",
      "networkPublicIPPrefixes": "ippre-",
      "networkRouteFilters": "rf-",
      "networkRouteTables": "rt-",
      "networkRouteTablesRoutes": "udr-",
      "networkTrafficManagerProfiles": "traf-",
      "networkVirtualNetworkGateways": "vgw-",
      "networkVirtualNetworks": "vnet-",
      "networkVirtualNetworksSubnets": "snet-",
      "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
      "networkVirtualWans": "vwan-",
      "networkVpnGateways": "vpng-",
      "networkVpnGatewaysVpnConnections": "vcn-",
      "networkVpnGatewaysVpnSites": "vst-",
      "notificationHubsNamespaces": "ntfns-",
      "notificationHubsNamespacesNotificationHubs": "ntf-",
      "operationalInsightsWorkspaces": "log-",
      "portalDashboards": "dash-",
      "powerBIDedicatedCapacities": "pbi-",
      "purviewAccounts": "pview-",
      "recoveryServicesVaults": "rsv-",
      "resourcesResourceGroups": "rg-",
      "searchSearchServices": "srch-",
      "serviceBusNamespaces": "sb-",
      "serviceBusNamespacesQueues": "sbq-",
      "serviceBusNamespacesTopics": "sbt-",
      "serviceEndPointPolicies": "se-",
      "serviceFabricClusters": "sf-",
      "signalRServiceSignalR": "sigr",
      "sqlManagedInstances": "sqlmi-",
      "sqlServers": "sql-",
      "sqlServersDataWarehouse": "sqldw-",
      "sqlServersDatabases": "sqldb-",
      "sqlServersDatabasesStretch": "sqlstrdb-",
      "storageStorageAccounts": "st",
      "storageStorageAccountsVm": "stvm",
      "storSimpleManagers": "ssimp",
      "streamAnalyticsCluster": "asa-",
      "synapseWorkspaces": "syn",
      "synapseWorkspacesAnalyticsWorkspaces": "synw",
      "synapseWorkspacesSqlPoolsDedicated": "syndp",
      "synapseWorkspacesSqlPoolsSpark": "synsp",
      "timeSeriesInsightsEnvironments": "tsi-",
      "webServerFarms": "plan-",
      "webSitesAppService": "app-",
      "webSitesAppServiceEnvironment": "ase-",
      "webSitesFunctions": "func-",
      "webStaticSites": "stapp-"
    },
    "abbrs": "[variables('$fxv#0')]",
    "resourceToken": "[toLower(uniqueString(subscription().id, parameters('environmentName'), parameters('location')))]",
    "keyVaultPatSecretName": "REPO-PAT"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "virtualNetwork",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('vNetName'))), createObject('value', parameters('vNetName')), createObject('value', format('{0}{1}', variables('abbrs').networkVirtualNetworks, variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "deployVnet": {
            "value": "[parameters('deployVnet')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.20.4.51522",
              "templateHash": "6472870815631188480"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "deployVnet": {
              "type": "bool"
            }
          },
          "resources": [
            {
              "condition": "[parameters('deployVnet')]",
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-07-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/16"
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "properties": {
                "addressPrefix": "10.0.0.0/24"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "vNetName": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "condition": "[empty(parameters('keyVaultPatSecretUri'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyVault",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('keyVaultName'))), createObject('value', parameters('keyVaultName')), createObject('value', format('{0}{1}', variables('abbrs').keyVaultVaults, variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.20.4.51522",
              "templateHash": "17021191514568619793"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "accessPolicies": [],
                "enableRbacAuthorization": true,
                "enableSoftDelete": true
              }
            }
          ],
          "outputs": {
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '2022-07-01').vaultUri]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "condition": "[empty(parameters('keyVaultPatSecretUri'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyVaultPatSecret",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('keyVaultPatSecretName')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVault'), '2022-09-01').outputs.name.value]"
          },
          "secretValue": {
            "value": "[parameters('keyVaultPatSecretValue')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.20.4.51522",
              "templateHash": "11274392087893055393"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "keyVaultName": {
              "type": "string"
            },
            "contentType": {
              "type": "string",
              "defaultValue": "string"
            },
            "secretValue": {
              "type": "securestring",
              "metadata": {
                "description": "The value of the secret. Provide only derived values like blob storage access, but do not hard code any secrets in your templates"
              }
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true
            },
            "exp": {
              "type": "int",
              "defaultValue": 0
            },
            "nbf": {
              "type": "int",
              "defaultValue": 0
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "attributes": {
                  "enabled": "[parameters('enabled')]",
                  "exp": "[parameters('exp')]",
                  "nbf": "[parameters('nbf')]"
                },
                "contentType": "[parameters('contentType')]",
                "value": "[parameters('secretValue')]"
              }
            }
          ],
          "outputs": {
            "secretUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), '2022-07-01').secretUri]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[parameters('devBoxName')]",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('devBoxName'))), createObject('value', parameters('devBoxName')), createObject('value', format('{0}{1}', variables('abbrs').devbox, variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "projectName": {
            "value": "[parameters('projectName')]"
          },
          "vNetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.vNetName.value]"
          },
          "rsToken": {
            "value": "[variables('resourceToken')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.20.4.51522",
              "templateHash": "789281507809771945"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "projectName": {
              "type": "string"
            },
            "vNetName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string",
              "defaultValue": "default"
            },
            "environmentTypes": {
              "type": "array",
              "defaultValue": [
                "QualityInsurance",
                "Development"
              ]
            },
            "rsToken": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.DevCenter/devcenters",
              "apiVersion": "2023-01-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {},
              "identity": {
                "type": "SystemAssigned"
              }
            },
            {
              "copy": {
                "name": "devCenterEnvironment",
                "count": "[length(parameters('environmentTypes'))]"
              },
              "type": "Microsoft.DevCenter/devcenters/environmentTypes",
              "apiVersion": "2023-01-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), parameters('environmentTypes')[copyIndex()])]",
              "properties": {},
              "dependsOn": [
                "[resourceId('Microsoft.DevCenter/devcenters', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.DevCenter/devcenters/attachednetworks",
              "apiVersion": "2023-01-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-NetConnection-{1}', parameters('name'), parameters('rsToken')))]",
              "properties": {
                "networkConnectionId": "[resourceId('Microsoft.DevCenter/networkConnections', format('{0}-NetConnection-{1}', parameters('name'), parameters('rsToken')))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DevCenter/devcenters', parameters('name'))]",
                "[resourceId('Microsoft.DevCenter/networkConnections', format('{0}-NetConnection-{1}', parameters('name'), parameters('rsToken')))]"
              ]
            },
            {
              "type": "Microsoft.DevCenter/projects",
              "apiVersion": "2023-01-01-preview",
              "name": "[parameters('projectName')]",
              "location": "[parameters('location')]",
              "properties": {
                "devCenterId": "[resourceId('Microsoft.DevCenter/devcenters', parameters('name'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DevCenter/devcenters', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "projectXEnvironmentType",
                "count": "[length(parameters('environmentTypes'))]"
              },
              "type": "Microsoft.DevCenter/projects/environmentTypes",
              "apiVersion": "2023-01-01-preview",
              "name": "[format('{0}/{1}', parameters('projectName'), parameters('environmentTypes')[copyIndex()])]",
              "properties": {
                "deploymentTargetId": "[subscription().id]",
                "status": "Enabled",
                "creatorRoleAssignment": {
                  "roles": {
                    "acdd72a7-3385-48ef-bd42-f606fba81ae7": {}
                  }
                }
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DevCenter/projects', parameters('projectName'))]"
              ]
            },
            {
              "type": "Microsoft.DevCenter/networkConnections",
              "apiVersion": "2023-01-01-preview",
              "name": "[format('{0}-NetConnection-{1}', parameters('name'), parameters('rsToken'))]",
              "location": "[parameters('location')]",
              "properties": {
                "domainJoinType": "AzureADJoin",
                "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnetName'))]",
                "networkingResourceGroupName": "[format('NI_{0}-NetConnection_{1}', parameters('name'), toLower(parameters('location')))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DevCenter/devcenters', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "networkConnectionName": {
              "type": "string",
              "value": "[format('{0}-NetConnection-{1}', parameters('name'), parameters('rsToken'))]"
            },
            "projectName": {
              "type": "string",
              "value": "[parameters('projectName')]"
            },
            "identityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DevCenter/devcenters', parameters('name')), '2023-01-01-preview', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'virtualNetwork')]"
      ]
    },
    {
      "condition": "[empty(parameters('keyVaultPatSecretUri'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "devcenter-keyvault-access",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVault'), '2022-09-01').outputs.name.value]"
          },
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', parameters('devBoxName')), '2022-09-01').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.20.4.51522",
              "templateHash": "10663892150162092352"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            }
          },
          "variables": {
            "keyVaultSecretsUserRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(parameters('principalId'), 'Secrets', variables('keyVaultSecretsUserRole'))]",
              "properties": {
                "roleDefinitionId": "[variables('keyVaultSecretsUserRole')]",
                "principalType": "ServicePrincipal",
                "principalId": "[parameters('principalId')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', parameters('devBoxName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "devBoxDefinitions",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "devBoxName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', parameters('devBoxName')), '2022-09-01').outputs.name.value]"
          },
          "definitions": {
            "value": "[parameters('definitions')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.20.4.51522",
              "templateHash": "8544817254653993495"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "devBoxName": {
              "type": "string"
            },
            "definitions": {
              "type": "array"
            },
            "machinesVMImageName": {
              "type": "string",
              "defaultValue": "microsoftvisualstudio_visualstudioplustools_vs-2022-ent-general-win11-m365-gen2"
            }
          },
          "variables": {
            "defaultMachineSku": "general_a_8c32gb_v1",
            "defaultMachineStorage": "ssd_256gb"
          },
          "resources": [
            {
              "copy": {
                "name": "devboxDefinitions",
                "count": "[length(parameters('definitions'))]"
              },
              "type": "Microsoft.DevCenter/devcenters/devboxdefinitions",
              "apiVersion": "2023-01-01-preview",
              "name": "[format('{0}/{1}', parameters('devBoxName'), parameters('definitions')[copyIndex()].name)]",
              "location": "[parameters('location')]",
              "properties": {
                "imageReference": {
                  "id": "[format('{0}/images/{1}', reference(resourceId('Microsoft.DevCenter/devcenters/galleries', parameters('devBoxName'), 'Default'), '2023-01-01-preview').galleryResourceId, parameters('machinesVMImageName'))]"
                },
                "sku": {
                  "name": "[if(not(empty(parameters('definitions')[copyIndex()].sku)), parameters('definitions')[copyIndex()].sku, variables('defaultMachineSku'))]"
                },
                "osStorageType": "[if(not(empty(parameters('definitions')[copyIndex()].storage)), parameters('definitions')[copyIndex()].storage, variables('defaultMachineStorage'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', parameters('devBoxName'))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "devBoxPools",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "devBoxProjectName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', parameters('devBoxName')), '2022-09-01').outputs.projectName.value]"
          },
          "devBoxNetworkConnectionName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', parameters('devBoxName')), '2022-09-01').outputs.networkConnectionName.value]"
          },
          "poolNames": {
            "value": "[parameters('poolNames')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.20.4.51522",
              "templateHash": "14375835644563091842"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "devBoxProjectName": {
              "type": "string"
            },
            "devBoxNetworkConnectionName": {
              "type": "string"
            },
            "poolNames": {
              "type": "array"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "pools",
                "count": "[length(parameters('poolNames'))]"
              },
              "type": "Microsoft.DevCenter/projects/pools",
              "apiVersion": "2023-01-01-preview",
              "name": "[format('{0}/{1}', parameters('devBoxProjectName'), parameters('poolNames')[copyIndex()].name)]",
              "location": "[parameters('location')]",
              "properties": {
                "devBoxDefinitionName": "[parameters('poolNames')[copyIndex()].definition]",
                "licenseType": "Windows_Client",
                "localAdministrator": "[if(parameters('poolNames')[copyIndex()].enableLocalAdmin, 'Enabled', 'Disabled')]",
                "networkConnectionName": "[parameters('devBoxNetworkConnectionName')]"
              }
            },
            {
              "copy": {
                "name": "poolsSchedules",
                "count": "[length(parameters('poolNames'))]"
              },
              "condition": "[not(empty(parameters('poolNames')[copyIndex()].schedule))]",
              "type": "Microsoft.DevCenter/projects/pools/schedules",
              "apiVersion": "2023-01-01-preview",
              "name": "[format('{0}/{1}/default', parameters('devBoxProjectName'), parameters('poolNames')[copyIndex()].name)]",
              "properties": {
                "type": "StopDevBox",
                "frequency": "Daily",
                "time": "[parameters('poolNames')[copyIndex()].schedule.time]",
                "timeZone": "[parameters('poolNames')[copyIndex()].schedule.timeZone]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DevCenter/projects/pools', parameters('devBoxProjectName'), parameters('poolNames')[copyIndex()].name)]",
                "[resourceId('Microsoft.DevCenter/projects/pools', parameters('devBoxProjectName'), parameters('poolNames')[copyIndex()].name)]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', parameters('devBoxName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'devBoxDefinitions')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "devBoxAccess",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[parameters('devboxRbac').principalId]"
          },
          "roleType": {
            "value": "[parameters('devboxRbac').roleType]"
          },
          "projectName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', parameters('devBoxName')), '2022-09-01').outputs.projectName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.20.4.51522",
              "templateHash": "15306991366760045293"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "roleType": {
              "type": "string",
              "allowedValues": [
                "Group",
                "User"
              ]
            },
            "projectName": {
              "type": "string"
            }
          },
          "variables": {
            "devCenterProjectAdminRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '331c37c6-af14-46d9-b9f4-e1909e1b95a0')]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DevCenter/projects/{0}', parameters('projectName'))]",
              "name": "[guid(parameters('principalId'), 'DevCenterAdmin', variables('devCenterProjectAdminRole'))]",
              "properties": {
                "roleDefinitionId": "[variables('devCenterProjectAdminRole')]",
                "principalType": "[parameters('roleType')]",
                "principalId": "[parameters('principalId')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', parameters('devBoxName'))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "devBoxCatalog",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "devBoxName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', parameters('devBoxName')), '2022-09-01').outputs.name.value]"
          },
          "catalogName": {
            "value": "[parameters('catalog').name]"
          },
          "repositoryType": {
            "value": "[parameters('catalog').repositoryType]"
          },
          "uri": {
            "value": "[parameters('catalog').uri]"
          },
          "branch": {
            "value": "[parameters('catalog').branch]"
          },
          "path": "[if(contains(parameters('catalog'), 'path'), createObject('value', parameters('catalog').path), createObject('value', ''))]",
          "patKeyVaultUri": "[if(empty(parameters('keyVaultPatSecretUri')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVaultPatSecret'), '2022-09-01').outputs.secretUri.value), createObject('value', parameters('keyVaultPatSecretUri')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.20.4.51522",
              "templateHash": "13617033482658400492"
            }
          },
          "parameters": {
            "devBoxName": {
              "type": "string"
            },
            "patKeyVaultUri": {
              "type": "string"
            },
            "catalogName": {
              "type": "string"
            },
            "repositoryType": {
              "type": "string",
              "allowedValues": [
                "ado",
                "gitHub"
              ]
            },
            "uri": {
              "type": "string"
            },
            "branch": {
              "type": "string"
            },
            "path": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The folder path where the artifacts are located"
              }
            }
          },
          "variables": {
            "properties": "[if(equals(parameters('repositoryType'), 'ado'), createObject('adoGit', createObject('uri', parameters('uri'), 'branch', parameters('branch'), 'path', parameters('path'), 'secretIdentifier', parameters('patKeyVaultUri'))), createObject('gitHub', createObject('uri', parameters('uri'), 'branch', parameters('branch'), 'path', parameters('path'), 'secretIdentifier', parameters('patKeyVaultUri'))))]"
          },
          "resources": [
            {
              "type": "Microsoft.DevCenter/devcenters/catalogs",
              "apiVersion": "2023-01-01-preview",
              "name": "[format('{0}/{1}', parameters('devBoxName'), parameters('catalogName'))]",
              "properties": "[variables('properties')]"
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', parameters('devBoxName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVaultPatSecret')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    }
  ],
  "outputs": {
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_RESOURCE_GROUP": {
      "type": "string",
      "value": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    }
  }
}